# - Creates a pre-release if pushed on main branch without a version tag.
# - Creates a release if pushed on main branch with a version tag.
---
name: "Release"

on:
  push:
    branches:
      - main
    tags:
      # This is not regex: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - v[0-9]+.[0-9]+.[0-9]+*

env:
  DEBUG_OUTPUT: "true"
  PROJECT_NAME: ucr2-toolchain
  PYTHON_VERSION: "3.10.13"
  CONTAINER_IMAGE_NAME: unfoldedcircle/r2-pyinstaller

jobs:
  release:
    name: Create Release
    # push on main without a version = development pre-release
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ${{ env.PROJECT_NAME}}
        uses: actions/checkout@v3
        with:
          # History of 100 should be more than enough to calculate commit count since last release tag.
          fetch-depth: 100
          path: ${{ env.PROJECT_NAME}}

      - name: Fetch all tags to determine version
        run: |
          cd ${{ env.PROJECT_NAME}}
          git fetch origin +refs/tags/*:refs/tags/*
          git describe --match "v[0-9]*" --tags HEAD --always

      - name: Get artifact version
        run: |
          cd ${{ env.PROJECT_NAME}}
          IMG_VERSION=$(git describe --match "v[0-9]*" --tags HEAD --always)
          echo "IMG_VERSION=$IMG_VERSION" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +"%Y%m%d_%H%M%S")" >> $GITHUB_ENV

      - name: Create Pre-Release ${{ env.IMG_VERSION }}
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "!contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build ${{ env.IMG_VERSION }}"

      - name: Create Release ${{ env.IMG_VERSION }}
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false

  container:
    name: Create Docker image
#    if: "contains(github.ref, 'tags/v')" # only publish for releases!
    runs-on: ubuntu-22.04
    needs: release

    steps:

      - name: Set image labels
        run: |
          echo "VERSION=$(git describe --match "v[0-9]*" --tags HEAD --always)" >> GITHUB_ENV
          echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          echo "GITHUB_SHA=$GITHUB_SHA" >> $GITHUB_ENV

      - name: Set development image tag
        if: "!contains(github.ref, 'tags/v')"
        run: |
          echo "IMAGE_TAGS=${CONTAINER_IMAGE_NAME}:${PYTHON_VERSION}" >> $GITHUB_ENV          

      - name: Set release image tag
        if: "contains(github.ref, 'tags/v')"
        run: |
          TAG="${GITHUB_REF#*tags/v}"
          echo "IMAGE_TAGS=${CONTAINER_IMAGE_NAME}:${PYTHON_VERSION},${CONTAINER_IMAGE_NAME}:${PYTHON_VERSION}-$TAG" >> $GITHUB_ENV          

      - name: Log
        if: env.DEBUG_OUTPUT == 'true'
        run: |
          echo "--- Environment ---"
          printenv
          echo "-------------------"
          echo "BUILD_DATE: ${{ env.BUILD_DATE }}"
          echo "VERSION   : ${{ env.IMG_VERSION }}"
          echo "REVISION  : ${{ env.GITHUB_SHA }}"
          echo "IMAGE_TAGS: ${{ env.IMAGE_TAGS }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: false
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            VERSION=${{ env.IMG_VERSION }}
            REVISION=${{ env.GITHUB_SHA }}
          platforms: aarch64
          tags: ${{ env.IMAGE_TAGS }}

      - name: Log
        if: env.DEBUG_OUTPUT == 'true'
        run: |
          docker images
          docker inspect "${CONTAINER_IMAGE_NAME}:${PYTHON_VERSION}"
